#pragma kernel Flow


struct Vert{
  float3 pos;
  float3 vel;
  float3 nor;
  float3 ogPos;
  float3 axis;
  float life;
};



RWStructuredBuffer<Vert> _VertBuffer;
Texture2D<float4> _HeightMap;
SamplerState sampler_HeightMap;
float _MapSize;
float _MapHeight;

float _Down;
float3 _WandPos;

float3 _UrsulaPos;
float3 _UrsulaUp;

float _Emit;
float3 _EmissionPos;

float3 worldPos( float3 pos ){
    float4 c = _HeightMap.SampleLevel(sampler_HeightMap, pos.xz * _MapSize , 1);//tex2Dlod(_HeightMap , float4(pos.xz * _MapSize,0,0) );
    pos.y = max(pos.y, c.x * _MapHeight + 1 + c.a*2);
    return pos;
}


float3 directionVector( float3 pos ){
    float4 c = _HeightMap.SampleLevel(sampler_HeightMap, pos.xz * _MapSize , 1);//tex2Dlod(_HeightMap , float4(pos.xz * _MapSize,0,0) );
    return 2*float3(c.g,.5,c.b)-1;
}

float3 _Frame1;
float3 _Frame2;
float3 _Frame3;
float3 _Frame4;

int _VertBuffer_COUNT;
int _SkeletonBuffer_COUNT;

#include "../Chunks/safeID.cginc"
#include "../Chunks/snoise.cginc"
#include "../Chunks/hash.cginc"
#include "../Chunks/curlNoise.cginc"



float4 getProj( float3 pos , float3 sp , float3 ep ){
  float3 dif = sp-ep;
  float dot1 = dot( pos-sp , normalize(dif));

  float3 proj = normalize(dif) * dot1;
  float dotProj = dot( proj, ep-sp);

  float3 lineToPoint = pos-sp-proj;

  float above = 0;
  if( dotProj < 0 ){
    above = 1;//*(sp-pos);
  }

  if( length(proj) >= length(sp-ep)){
    above = -1;
    //lineToPoint *= 20;//*(ep-pos);
  }

  return float4( lineToPoint , above );
}



float3 CurlForce( float3 v , float3 rO , float3 rD ){


  float3 toLine = getProj( v , rO , rO + rD );

  float3 curl = cross( toLine , rD );

  return curl; 

} 


float3 getDir( int i , out float3 p1 , out float3 p2 ){
  if( i == 0 ){
    p1 = _Frame1; p2 = _Frame2;
  }else if ( i == 1 ){
    p1 = _Frame2; p2 = _Frame4;
  }else if ( i == 2 ){
    p1 = _Frame4; p2 = _Frame3;
  }else{
    p1 = _Frame3; p2 = _Frame1;
  }

  return normalize( p1 - p2);

}

float3 rodForce(float r , float3 pos ){

  float3 p = float3(0,1,0);
  float3 d = float3(0,0,1);
  float minDist = 10000;
  float outside = 0;
  for(int i = 0; i < 4; i++ ){
    float3 p1; float3 p2;

    float3 dir = getDir( i, p1 , p2);
    float4 tP = getProj( pos , p1   , p2   );
   

    if(length(tP.xyz) < minDist ){

      minDist = length(tP.xyz);


      d = dir ;
      p = tP;
      if(tP.w != 0 ){ outside = 1;}
      if( tP.w >= 1 ){
        d = getDir( (i+1)%4 , p1, p2);
        tP = getProj( pos , p1 , p2 );
      }


    
    }

  }

  p = normalize(p);
  float3 towards = -p * ( minDist - r );
  float3 curl = cross( p , d);
  towards = (( towards * 4 ) / max(1,(minDist*minDist)))+ curl * 1 + d * 1.5;
 
  towards *= 1-outside;
 // float3 crossVal = 
  //minDist = clamp( minDist, float3(-5,-5,-5) , float3(5,5,5));
  return towards;

}

float3 ursulaForce( float3 pos ){

  float4 d = getProj( pos , _UrsulaPos - _UrsulaUp , _UrsulaPos + _UrsulaUp );
  float l = length(d);

 

  float3 d2 = pos - _UrsulaPos;
  float l2 = length(d2);

  d2 = 5*normalize(d2)*(l2-1) / max(1,l2*l2);

  float3 c = normalize(cross( _UrsulaUp , d.xyz ));

   d.xyz *= (1-abs(d.w));
  return d + c+ d2;//d + c;

}

float3 ring( float id , float r ){

  float3 x = normalize(_Frame1 - _Frame2);
  float3 y = normalize(_Frame4 - _Frame2);


  float a = hash(id*100) * 6.28;

  float3 p = r*(-sin( a )*x +cos(a)*y);

  return p; 
}


float4x4 rotation(float3 axis, float angle)
{
    axis = normalize(axis);
    float s = sin(angle);
    float c = cos(angle);
    float oc = 1.0 - c;
    
    return float4x4(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,  0.0,
                oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,  0.0,
                oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c,           0.0,
                0.0,                                0.0,                                0.0,                                1.0);
}


float4 sample( float3 pos ){
    float4 c = _HeightMap.SampleLevel(sampler_HeightMap, pos.xz * _MapSize , 1);//tex2Dlod(_HeightMap , float4(pos.xz * _MapSize,0,0) );
    c.x = c.x * _MapHeight;// + 1 + c.a*2);
    return c;
}


#define NR_THREADS 128
[numthreads(NR_THREADS,1,1)]
void Flow(uint threadID : SV_GroupIndex, uint3 u3GroupID : SV_GroupID) {

  int pID = threadID + u3GroupID.x * NR_THREADS;

  pID = safeID(pID,_VertBuffer_COUNT);
  Vert vert = _VertBuffer[pID];



  if(_Emit > .5 ){
// float3 pos = float3(vert.uv.x/_MapSize,0, vert.uv.y/_MapSize );
    float p = float(pID);
        
    float3 axis = normalize(float3((2* hash(p*10)-1)
                                 ,(2* hash(p*20)-1)
                                 ,(2* hash(p*30)-1)));
    //float3 r = ring(p,.04);
    vert.pos = _EmissionPos + axis  * .5;// + float3(0,1,0); //worldPos(pos);
    vert.life = hash(p*1221) * .7;


    vert.axis = axis;
    vert.vel = axis * .05  * hash(p*1213);

  }else{
  if(_Down > .5 ){
    vert.life -= .01 * (2+sin(float(pID)));
  }
  

  if( vert.life < 0.1 && _Down > .5 ){
   // float3 pos = float3(vert.uv.x/_MapSize,0, vert.uv.y/_MapSize );
    float p = float(pID);
    
    float3 r = ring(p,.04);
    vert.pos = _WandPos + r ;// + float3(0,1,0); //worldPos(pos);
    vert.life = abs(vert.life)+1;
    vert.life %= 1;
    vert.life += 1;
    
    float3 axis = normalize(float3((2* hash(p*10)-1)
                                 ,(2* hash(p*20)-1)
                                 ,(2* hash(p*30)-1)));

    vert.axis = axis;
    vert.vel = axis * .03;


    //vert.vel =.4 * (r* .4+float3(0,.4,0));
  }else{

    float3 force = float3(0,0,0);
    //force += directionVector( vert.pos );

    //force += float3(0,-.5,0);
    force += .05*curlNoise(vert.pos * 1.1);

    force += .1*rodForce(.00,vert.pos);


    float4 data = sample(vert.pos);

    float height = data.x;
    float2 direction = data.yz * 2 - 1;
    float grass = data.w;

    if( vert.pos.y < height + 1 + grass * 2){
      float delta =  vert.pos.y - (height + 1 + grass * 2);
      force -= .3 * delta * float3(0,1,0);
    }else{
      force -= .1 * float3(0,1,0);
    }

    float d = vert.pos.y - (height + 1 + grass * 2);

    force += 1.3 * float3(direction.x,0,direction.y) / max(1,d);

    //force += -.2*ursulaForce(vert.pos);

    vert.vel += force * .003 * (1+hash(pID*1021.))/2;

   vert.life -= .002 * (3+sin(float(pID)));
  // if( vert.life < 0 ){ vert.life += 1; }

   vert.pos += vert.vel;

   vert.vel *= .97;


  }}
  
  
  vert.nor = mul(rotation(vert.axis,vert.life*3*(hash(float(pID*123))+1)),float4(0,0,1,0)).xyz;





  
  _VertBuffer[pID] = vert;
//}
}