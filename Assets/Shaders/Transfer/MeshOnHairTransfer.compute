#pragma kernel Transfer

struct Vert{
  float3 pos;
  float3 nor;
  float3 tangent;
  float2 uv;
  float debug;
};


struct Hair{
  float3 pos;
  float3 oPos;
  float3 nor;
  float3 tangent;
  float2 uv;
  float2 debug;
};

int _NumVertsPerHair;

float _MeshLength;
float _MeshSizeMultiplier;




RWStructuredBuffer<Vert> _VertBuffer;
RWStructuredBuffer<Vert> _BaseBuffer;

RWStructuredBuffer<Hair> _SkeletonBuffer;

int _VertBuffer_COUNT;
int _BaseBuffer_COUNT;
int _SkeletonBuffer_COUNT;


#include "../Chunks/cubicCurve.cginc"
#include "../Chunks/safeID.cginc"


float3 cubicFromValue( int hairID, in float val , out float3 dir , out float3 nor ){

  Hair c0;
  Hair c1;
  Hair c2;
  Hair cMinus;

  float3 n0 = float3(0,0,0);
  float3 n1 = float3(0,0,0);
  float3 v0 = float3( 0. , 0. , 0. );
  float3 v1 = float3( 0. , 0. , 0. );


  float base = val * (float(_NumVertsPerHair)-1.);

  float baseUp   = floor( base );
  float baseDown = ceil( base );
  float amount = base - baseUp;


  if( baseUp <= 0.1 ){

    c0 = _SkeletonBuffer[ safeID( hairID * _NumVertsPerHair + int( baseUp )        , _SkeletonBuffer_COUNT )];
    c1 = _SkeletonBuffer[ safeID( hairID * _NumVertsPerHair + int( baseDown )      , _SkeletonBuffer_COUNT )];
    c2 = _SkeletonBuffer[ safeID( hairID * _NumVertsPerHair + int( baseDown + 1. ) , _SkeletonBuffer_COUNT )];


    v1 = .5 * ( c2.pos - c0.pos );
    n1 = .5 * ( c2.tangent - c0.tangent );

  }else if( baseDown >= float(_NumVertsPerHair-1) ){

    c0 = _SkeletonBuffer[ safeID( hairID * _NumVertsPerHair + int( baseUp )      , _SkeletonBuffer_COUNT )];
    c1 = _SkeletonBuffer[ safeID( hairID * _NumVertsPerHair + int( baseDown )    , _SkeletonBuffer_COUNT )];
    c2 = _SkeletonBuffer[ safeID( hairID * _NumVertsPerHair + int( baseUp - 1. ) , _SkeletonBuffer_COUNT )];

    v0 = .5 * ( c1.pos - c2.pos );
    n0 = .5 * ( c1.tangent - c2.tangent );

  }else{

    c0 = _SkeletonBuffer[  safeID( hairID * _NumVertsPerHair +int( baseUp )   , _SkeletonBuffer_COUNT )];
    c1 = _SkeletonBuffer[  safeID( hairID * _NumVertsPerHair +int( baseDown ) , _SkeletonBuffer_COUNT )];


    float3 pMinus;

    cMinus = _SkeletonBuffer[ safeID( hairID * _NumVertsPerHair + int( baseUp - 1. )   , _SkeletonBuffer_COUNT )];
    c2 =     _SkeletonBuffer[ safeID( hairID * _NumVertsPerHair + int( baseDown + 1. ) , _SkeletonBuffer_COUNT )];

    v1 = .5 * ( c2.pos - c0.pos );
    v0 = .5 * ( c1.pos - cMinus.pos );

    n1 = .5 * ( c2.tangent - c0.tangent );
    n0 = .5 * ( c1.tangent - cMinus.tangent );

  }


  float3 p0 = c0.pos;
  float3 p1 = c0.pos + v0/3.;
  float3 p2 = c1.pos - v1/3.;
  float3 p3 = c1.pos;

  float3 t0 = c0.tangent;
  float3 t1 = c0.tangent + n0/3.;
  float3 t2 = c1.tangent - n1/3.;
  float3 t3 = c1.tangent;

  float3 pos = cubicCurve( amount , p0 , p1 , p2 , p3 );
  float3 normal = normalize(cubicCurve( amount , t0 , t1 , t2 , t3 ));

  //nor = lerp(t0,t3,amount);//normal;//_SkeletonBuffer[ int( baseDown )       ].debug;//normal; //cubicCurve( amount  + .11 , c0 , c1 , c2 , c3 );
  nor = normal;//curveBuffer[ int( baseDown )       ].debug;//normal; //cubicCurve( amount  + .11 , c0 , c1 , c2 , c3 );
  dir = normalize(pos -cubicCurve( amount  + .01 , p0 , p1 , p2 , p3 ));

  return pos;


}


#define NR_THREADS 128
[numthreads(NR_THREADS,1,1)]
void Transfer (uint threadID : SV_GroupIndex, uint3 u3GroupID : SV_GroupID) {

  int pID = threadID + u3GroupID.x * NR_THREADS;

  if( pID < _VertBuffer_COUNT ){
    
    int bID = pID % _BaseBuffer_COUNT;
    int hairID = pID / _BaseBuffer_COUNT;
    Vert v = _BaseBuffer[safeID( bID , _BaseBuffer_COUNT )];




    Hair s = _SkeletonBuffer[safeID(hairID*_NumVertsPerHair, _SkeletonBuffer_COUNT)];

    float val = (v.pos.y/_MeshLength);//_MeshLength;


    float valAlong = clamp( val ,0,1);
    float3 nor; float3 dir;

    float3 extraPos = cubicFromValue(hairID,valAlong,dir,nor);



    
     // nor = float3(0,0,1);
  
    float x = v.pos.x;
    float y = v.pos.z;
    float z = 0;

    //dir = float3(0,1,0);
    //nor = float3(0,1,0);

    //extraPos = float3(.1 * float(bID) , v.pos.y , 0 );

    float3 zDir = normalize(dir);
    float3 xDir = normalize(nor);
    float3 yDir = normalize(cross(dir,nor));

   

    float3 fPos = -s.nor*.003 + extraPos  + _MeshSizeMultiplier * ( x * xDir + y * yDir + z * zDir);

    //fPos = s.pos + v.pos;
    float3 c1 = float3( xDir.x , yDir.x , zDir.x );
    float3 c2 = float3( xDir.y , yDir.y , zDir.y );
    float3 c3 = float3( xDir.z , yDir.z , zDir.z );
    float3x3 rotMat = float3x3(c1,c2,c3);


   // fPos = v.pos + float3(hairID,0,0);//avePos+mul(rotMat, float3(v.pos.x,v.pos.y,0));
    float3 fNor = normalize(mul(rotMat,v.nor));
    float3 fTan = normalize(mul(rotMat,v.tangent));

    pID = safeID(pID,_VertBuffer_COUNT);

    _VertBuffer[pID].pos      = fPos;// = v;
    _VertBuffer[pID].nor      = fNor;// = v;
    _VertBuffer[pID].tangent  = fTan;// = v;
    _VertBuffer[pID].uv       = v.uv;// = v;
    _VertBuffer[pID].debug    = float(hairID);


  }

}